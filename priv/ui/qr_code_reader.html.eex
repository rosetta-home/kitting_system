<html>
<head>
<title>QRCODE Reader</title>

<style type="text/css">
	/*#qr-canvas {display: none;}*/

	@keyframes pulse{
		0% { filter: opacity(1) }
		50% { filter: opacity(.5) }
		100% { filter: opacity(.25) }
	}

	.output {
		border: 1px solid #777777;
		padding: 0px;
		margin: 20px;
		min-height: 300px;
	}

	.host {
		border: 1px solid #777777;
		margin: 20px;
	}

	.host div{
		padding: 30px;
	}

	.host div.complete{
		background-color: green;
	}

	.output div{
		border-bottom: 1px solid #eeeeee;
		margin: 0;
		padding: 20px;
	}

	.output div span.display{
		background-color: #e3e6ef;
		border: 1px solid #ffffff;
		padding: 7px;
	}

	.output div span.device_type{
		font-weight: bold;
		font-size: 16px;
	}

	.output div.verification{
		background: repeating-linear-gradient(45deg, #aabaef, #aabaef 5px, #aaddef 5px, #aaddef 10px);
	}

	.output div.hub{
		background-color: #aabaec;
	}

	.output div.touchstone{
		background-color: #aabaef;
	}

	.output div.gateway{
		background-color: #baefaa;
	}

	.output div.touchstone_partial{
		background-color: #efaaba;
	}

	.output div.failure{
		background-color: #FF0000;
	}

	.output div span.status{
		margin-right: 20px;
		background-color: #FF0000;
		display: inline-block;
		border: 1px solid #999999;
		width: 10px;
		height: 10px;
		border-radius: 10px;
	}

	.output div.compiling span.status{
		background-color: #FF0000;
		animation-duration: .5s;
  	animation-name: pulse;
  	animation-iteration-count: infinite;
		animation-direction: alternate-reverse;
	}

	.output div.flashing span.status{
		background-color: #0000FF;
		animation-duration: 1s;
  	animation-name: pulse;
  	animation-iteration-count: infinite;
		animation-direction: alternate-reverse;
	}

	.output div.complete span.status{
		background-color: #00FF00;
	}

	ul.meta {
		list-style: none;
	}

	ul.meta li{
		display: inline;
		padding: 10px;
	}

	ul.meta li span {
		display: inline-block;
		height: 10px;
		width: 10px;
		border-radius: 10px;
		margin-left: 10px;
		border: 1px solid #999999;
	}
	ul.meta li.failure span{
		background-image: radial-gradient(#FFFF11, #FF0000);
	}

	ul.meta li.success span{
		background-image: radial-gradient(#FFFF00, #00FF00);
	}

</style>

<script type="text/javascript" src="static/js/qr_code_reader/grid.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/version.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/detector.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/formatinf.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/errorlevel.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/bitmat.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/datablock.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/bmparser.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/datamask.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/rsdecoder.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/gf256poly.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/gf256.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/decoder.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/qrcode.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/findpat.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/alignpat.js"></script>
<script type="text/javascript" src="static/js/qr_code_reader/databr.js"></script>

</head>

<body onload="load()">
		<video id="video" width="320" muted loop autoplay></video>
		<canvas id="qr-canvas" width="320"></canvas>
		<div class="host" id="host"></div>
		<div class="output" id="usb"></div>
</body>

<script type="text/javascript">
	var constraints = {audio: false, video: { width: 320 }};
	var canvas = document.getElementById('qr-canvas').getContext('2d');
	var video = document.getElementById('video');
	var sending = false;
	var last = 0;
	qrcode.debug = true;

	var devices = {};

	function parse_device(string){
		var parts = string.split(":");
		if(parts[0] == "_") return {};
		var d = {
			device: parts[0],
			action: parts[1],
			status: parts[2],
			meta: {},
		}
		if(parts[3] && (parts[3].startsWith("t") || parts[3].startsWith("i"))){
			d.meta = parts[3].split(",").reduce((acc, el) => {
				var p = el.split("=", 2);
				acc[p[0]] = p[1];
				return acc;
			}, {});
		}
		return d;
	}

	function update_devices(device){
		if(!device.device) return;
		devices = JSON.parse(JSON.stringify(devices));
		var n = {device: "", action: "", status: "", meta: {}};
		var d_d = devices[device.device] || n;
		var meta = Object.assign({}, device.meta);
		delete device.meta;
		var d = Object.assign(d_d, device);
		if(Object.keys(meta).length) d.meta = meta;
		devices[d.device] = d;
	}

	function read(a){
		if(sending) return;
		document.getElementById("host").innerHTML = "Sending.."
		sending = true;
		params = "id="+a.trim();
		var xhr = new XMLHttpRequest();
		xhr.open("POST", "/qr_capture", true);
		xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		xhr.onprogress = function(){
			xhr.responseText.split("\r\n").forEach( (st) =>{
				var device = parse_device(st);
				update_devices(device);
			})
			render_devices()
		}
		xhr.onreadystatechange = function () {
  		if(xhr.readyState === XMLHttpRequest.DONE){
				sending = false;
				devices = {};
			}
		}
		xhr.send(params);
	}

	function render_devices(){
		var keys = Object.keys(devices).sort((a, b) => {
			var a_s = devices[a].action;
			var b_s = devices[b].action;
			console.log(a_s);
			console.log(b_s);
			var vals = {hub: 6, touchstone: 5, gateway: 4, touchstone_partial: 3, failure: 2, verification: 1, id_verified: 0};
			var diff = vals[a_s] - vals[b_s]
			console.log(diff)
			return diff;
		});
		var output = {usb: "", host: ""};
		keys.forEach( (k) => {
			var d = devices[k];
			var id = d.device;
			if(id.startsWith("ttyUSB") || id.startsWith("sd")) id = "usb"
			var st = "<div class=\""+d.status+ " "+d.action+"\"><span class=\"status\"></span><span class=\"display\"><span class=\"device_type\">"+d.action+"</span> - "+ k +": "+d.status+ "</span>"+ meta_keys(d)+"</div>";
			output[id]+=st;
		})
		document.getElementById("host").innerHTML = output.host;
		document.getElementById("usb").innerHTML = output.usb;
	}

	function meta_keys(d){
		var st = "<ul class=\"meta\">";
		Object.keys(d.meta).forEach((k) => {
			if(k != "X"){
				var v = d.meta[k];
				var c = v == "0" ? "failure" : "success";
				st += "<li class=\""+c+"\">"+k+": "+v+"<span></span></li>";
			}
		})
		return st+="</ul>";
	}

	function load(){
		qrcode.callback = read;
		var promise = navigator.mediaDevices.getUserMedia(constraints)
		.then(function(mediaStream){
			console.log(mediaStream);
			video.setAttribute('style', 'transform:rotateY(-180deg);');
			video.srcObject = mediaStream;
			document.getElementById('qr-canvas').setAttribute('height', "240px");
			draw();
		});
	}

	function draw(timestamp){
		var next = timestamp - last;
		if(next >= 200){
			canvas.drawImage(video, 0, 0);
			decode();
			last = timestamp;
		}
		requestAnimationFrame(draw);
	}

	function decode(){
		try{
			qrcode.decode();
		}catch(e){
			//console.error(e);
		}
	}
</script>
</html>
